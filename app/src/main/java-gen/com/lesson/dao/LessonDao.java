package com.lesson.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lesson.entity.Lesson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LESSON".
*/
public class LessonDao extends AbstractDao<Lesson, Long> {

    public static final String TABLENAME = "LESSON";

    /**
     * Properties of entity Lesson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Lesson_name = new Property(1, String.class, "lesson_name", false, "LESSON_NAME");
        public final static Property Lesson_teacher = new Property(2, String.class, "lesson_teacher", false, "LESSON_TEACHER");
        public final static Property Lesson_classroom = new Property(3, String.class, "lesson_classroom", false, "LESSON_CLASSROOM");
        public final static Property Student_number = new Property(4, Integer.class, "student_number", false, "STUDENT_NUMBER");
        public final static Property Class_name = new Property(5, String.class, "class_name", false, "CLASS_NAME");
    };


    public LessonDao(DaoConfig config) {
        super(config);
    }
    
    public LessonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LESSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LESSON_NAME\" TEXT," + // 1: lesson_name
                "\"LESSON_TEACHER\" TEXT," + // 2: lesson_teacher
                "\"LESSON_CLASSROOM\" TEXT," + // 3: lesson_classroom
                "\"STUDENT_NUMBER\" INTEGER," + // 4: student_number
                "\"CLASS_NAME\" TEXT);"); // 5: class_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LESSON\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Lesson entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String lesson_name = entity.getLesson_name();
        if (lesson_name != null) {
            stmt.bindString(2, lesson_name);
        }
 
        String lesson_teacher = entity.getLesson_teacher();
        if (lesson_teacher != null) {
            stmt.bindString(3, lesson_teacher);
        }
 
        String lesson_classroom = entity.getLesson_classroom();
        if (lesson_classroom != null) {
            stmt.bindString(4, lesson_classroom);
        }
 
        Integer student_number = entity.getStudent_number();
        if (student_number != null) {
            stmt.bindLong(5, student_number);
        }
 
        String class_name = entity.getClass_name();
        if (class_name != null) {
            stmt.bindString(6, class_name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Lesson readEntity(Cursor cursor, int offset) {
        Lesson entity = new Lesson( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lesson_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lesson_teacher
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lesson_classroom
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // student_number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // class_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Lesson entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLesson_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLesson_teacher(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLesson_classroom(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStudent_number(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setClass_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Lesson entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Lesson entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
